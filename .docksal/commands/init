#!/usr/bin/env bash

## Initialize Docksal powered Drupal 8 site
##
## Usage: fin init

# Abort if anything fails
set -e

#-------------------------- Settings --------------------------------

# PROJECT_ROOT is passed from fin.
# The following variables are configured in the '.env' file: DOCROOT, SITE_DIRECTORY, SOURCE_ALIAS and others.

DOCROOT_PATH="${PROJECT_ROOT}/${DOCROOT}"
SITEDIR_PATH="${DOCROOT_PATH}/sites/${SITE_DIRECTORY}"
#-------------------------- END: Settings --------------------------------

#-------------------------- Helper functions --------------------------------

# Console colors
red='\033[0;31m'
green='\033[0;32m'
green_bg='\033[42m'
yellow='\033[1;33m'
NC='\033[0m'

echo-red () { echo -e "${red}$1${NC}"; }
echo-green () { echo -e "${green}$1${NC}"; }
echo-green-bg () { echo -e "${green_bg}$1${NC}"; }
echo-yellow () { echo -e "${yellow}$1${NC}"; }

if_failed ()
{
	if [ ! $? -eq 0 ]; then
		if [[ "$1" == "" ]]; then msg="an error occurred"; else msg="$1"; fi
		echo-red "$msg";
		exit 1;
	fi
}

is_windows ()
{
	local res=$(uname | grep 'CYGWIN_NT')
	if [[ "$res" != "" ]]; then
		return 0
	else
		return 1
	fi
}

# Copy a settings file.
# Skips if the destination file already exists.
# @param $1 source file
# @param $2 destination file
copy_settings_file()
{
	local source="$1"
	local dest="$2"

	if [[ ! -f $dest ]]; then
		echo "Copying ${dest}..."
		cp $source $dest
	else
		echo-yellow "${dest} already in place."
	fi
}

#-------------------------- END: Helper functions --------------------------------

#-------------------------- Functions --------------------------------

compile_configs ()
{
	# .gitlab-ci hooks
	if [[ -f ${PROJECT_ROOT}/.gitlab-ci.yml ]]; then
		rm ${PROJECT_ROOT}/.gitlab-ci.yml
	fi
	envsubst '${AO_PROJECT_ID}' < ${PROJECT_ROOT}/config/default/.gitlab-ci.yml >> ${PROJECT_ROOT}/.gitlab-ci.yml

	# composer.json.
	if [[ -f ${PROJECT_ROOT}/composer.json ]]; then
		rm ${PROJECT_ROOT}/composer.json
	fi
	envsubst '${AO_PROJECT_ID} ${AO_PROJECT_DESC}' < ${PROJECT_ROOT}/config/default/composer.json >> ${PROJECT_ROOT}/composer.json

	# README.md.
	if [[ -f ${PROJECT_ROOT}/README.md ]]; then
		rm ${PROJECT_ROOT}/README.md
	fi
	envsubst '${AO_GIT_URL} ${AO_PROJECT_ID} ${VIRTUAL_HOST}' < ${PROJECT_ROOT}/config/default/README.md >> ${PROJECT_ROOT}/README.md
}

# Set file/folder permissions
file_permissions ()
{
	echo-green "Resetting files directory permissions..."
	mkdir -p "${SITEDIR_PATH}/files"
	chmod -R 777 "${SITEDIR_PATH}/files"
}

# Install site
site_install ()
{
	cd ${DOCROOT_PATH}
	fin drush si -y --site-name="${AO_PROJECT_DESC}" --root=/var/www/web

	# Revert site dir permissions.
	chmod 755 "${SITEDIR_PATH}"
}
install_python_requirements () {
    #docker exec -ti hoaxly_scrapyd_1 apt-get install build-essential libxml2-dev libxslt1-dev python-dev libssl-dev libffi-dev -y
    #docker exec -ti hoaxly_scrapyd_1 pip install -r "/hoaxly/config/requirements.txt"

    docker exec -ti hoaxly_portia_1 pip install https://github.com/suraj-arya/scrapy-elasticsearch/archive/master.zip
    docker exec -ti hoaxly_portia_1 pip install -r "/app/data/projects/requirements.txt"

}

# Initialize local settings files
init_settings ()
{
	# Copy from settings templates
	copy_settings_file "config/default/default.settings.local.php" "${SITEDIR_PATH}/settings.local.php"
	copy_settings_file "config/default/default.settings.php" "${SITEDIR_PATH}/settings.php"
	copy_settings_file "config/default/development.services.yml" "${SITEDIR_PATH}/development.services.yml"
	copy_settings_file "config/default/drushrc.php" "${SITEDIR_PATH}/drushrc.php"
}

#-------------------------- END: Functions --------------------------------

#-------------------------- Execution --------------------------------

if [[ "$PROJECT_ROOT" == "" ]]; then
	echo-red "\$PROJECT_ROOT is not set"
	exit 1
fi

#Use this command once if you setup a initial commit for a new Repository.
#It will download Drupal Scaffolding Files.
#composer drupal-scaffold
#fin exec "composer install"

#echo-green "Setting file/folder permissions..."
#file_permissions

echo -e "${green_bg} Step 1 ${NC}${green} Initializing local project configuration...${NC}"

#init_settings

if [[ $DOCKER_RUNNING == "true" ]]; then
	echo -e "${green_bg} Step 2 ${NC}${green} Recreating services...${NC}"
	fin reset -f
else
	echo -e "${green_bg} Step 2 ${NC}${green} Creating services...${NC}"
	fin up
fi
echo "Waiting 10s for MySQL to start...";
sleep 10

echo -e "${green_bg} Step 3 ${NC}${green} Installing site...${NC}"
#time site_install

if is_windows; then
	echo-green "Add ${VIRTUAL_HOST} to your hosts file (/etc/hosts), e.g.:"
	echo-green "192.168.64.100  ${VIRTUAL_HOST}"
	echo
fi

cd ${DOCROOT_PATH}

#fin drush cr

echo -en "${green_bg} DONE! ${NC} "
echo -e "Open ${yellow}http://${VIRTUAL_HOST}${NC} in your browser to verify the setup."
echo -e "Or login directly here:"

#fin drush uli


echo -e "${green_bg} Step 2 ${NC}${green} installing python requirements ...${NC}"

# TODO: find a more generic way to execute commands in container or create a prepared image.

install_python_requirements

echo -en "${green}Everything Done! ${NC} "
echo -e "Open ${yellow}http://hoaxly.docksal:9001${NC} in your browser to verify the setup."
echo -e "And see README.md for scraping instructions."



#-------------------------- END: Execution --------------------------------
